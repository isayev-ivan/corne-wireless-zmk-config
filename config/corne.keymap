/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&lt { quick-tap-ms = <200>; };

&mt { quick-tap-ms = <200>; };

&sk { quick-release; };

/ {
    macros {
        mg_dot: mg_dot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(N7) &kp SPACE &sk LEFT_SHIFT>;
            label = "MG_DOT";
            wait-ms = <5>;
            tap-ms = <5>;
        };

        mg_comma: mg_comma {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(N6) &kp SPACE>;
            label = "MG_COMMA";
            wait-ms = <5>;
            tap-ms = <5>;
        };

        win_to_en: mac_to_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(NUMBER_1)) &to 1>;
            label = "MAC_TO_EN";
            wait-ms = <5>;
            tap-ms = <5>;
        };

        mac_to_ru: mac_to_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(NUMBER_2)) &to 0>;
            label = "MAC_TO_RU";
            wait-ms = <5>;
            tap-ms = <5>;
        };
    };

    behaviors {
        quest_excl: quest_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "QUEST_EXCL";
            bindings = <&kp LS(RA(SLASH))>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bracket_left: bracket_left {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACKET_LEFT";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LS(RA(NUMBER_6))>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bracket_right: bracket_right {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACKET_RIGHT";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp LS(RA(NUMBER_7))>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_right: comma_right {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_RIGHT";
            bindings = <&kp RA(NUMBER_6)>, <&kp RA(L)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        minus_down: minus_down {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUS_DOWN";
            bindings = <&kp MINUS>, <&kp RA(K)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        up_hash: up_hash {
            compatible = "zmk,behavior-mod-morph";
            label = "UP_HASH";
            bindings = <&kp HASH>, <&kp RA(I)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        equal_left: equal_left {
            compatible = "zmk,behavior-mod-morph";
            label = "EQUAL_LEFT";
            bindings = <&kp EQUAL>, <&kp RA(J)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hrm_left: hrm_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_LEFT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <18 19 20 32 7 8 9 11 21 22 34 35 33>;
        };

        hrm_right: hrm_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RIGHT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 14 15 16 17 25 26 27 28 29 14 24 13>;
        };

        to_en_raise: to_en_raise {
            compatible = "zmk,behavior-hold-tap";
            label = "TO_EN_RAISE";
            bindings = <&mo>, <&win_to_en>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
        };

        to_ru_raise: to_ru_raise {
            compatible = "zmk,behavior-hold-tap";
            label = "TO_RU_RAISE";
            bindings = <&mo>, <&mac_to_ru>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        win_default_ru {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            display-name = "Base";
            bindings = <
&kp RA(H)                   &kp Q  &kp W  &kp E      &kp R             &kp T                   &kp Y                     &kp U                      &kp I             &kp O    &kp P        &kp LEFT_BRACKET
&mt LEFT_ALT GRAVE          &kp A  &kp S  &kp D      &hrm_left 3 F     &kp G                   &kp H                     &hrm_right 4 J             &kp K             &kp L    &kp SEMI     &mt RIGHT_ALT APOSTROPHE
&mt LEFT_WIN RIGHT_BRACKET  &kp Z  &kp X  &kp C      &kp V             &kp B                   &kp N                     &kp M                      &kp COMMA         &kp DOT  &quest_excl  &mt RIGHT_WIN RA(SLASH)
                                          &lt 2 TAB  &mt LSHIFT SPACE  &mt LEFT_CONTROL RET    &mt RIGHT_CONTROL ESCAPE  &mt RIGHT_SHIFT BACKSPACE  &to_en_raise 2 0
            >;
        };

        win_en {
            bindings = <
&kp DOLLAR              &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans            &trans             &trans            &kp UNDERSCORE
&mt LEFT_ALT AMPERSAND  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans            &trans             &kp SINGLE_QUOTE  &mt RIGHT_ALT DOUBLE_QUOTES
&mt LEFT_WIN BACKSLASH  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans            &trans
                                        &trans  &trans  &trans    &trans  &trans  &to_ru_raise 2 0
            >;
        };

        raise_layer {
            bindings = <
&mo 5               &kp KP_SLASH     &kp N9  &kp N8  &kp N7  &kp KP_MINUS    &kp C_VOL_UP  &kp HOME     &kp UP                &kp END        &kp C_PREV  &mo 5
&mt LEFT_ALT EQUAL  &kp KP_MULTIPLY  &kp N3  &kp N2  &kp N1  &kp N0          &kp C_MUTE    &kp LEFT     &kp DOWN              &kp RIGHT      &kp C_PP    &mt RIGHT_ALT CAPSLOCK
&trans              &kp KP_DOT       &kp N6  &kp N5  &kp N4  &kp KP_PLUS     &kp C_VOL_DN  &kp PAGE_UP  &kp LG(LS(NUMBER_4))  &kp PAGE_DOWN  &kp C_NEXT  &kp LS(LG(NUMBER_6))
                                             &trans  &trans  &trans          &trans        &trans       &trans
            >;
        };

        symbol_right {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans             &mg_dot     &kp RA(N9)            &kp RA(N0)             &trans           &kp UNDERSCORE
&trans  &trans  &trans  &trans  &trans  &trans    &kp RA(SEMICOLON)  &kp RA(N7)  &bracket_left         &bracket_right         &kp ASTERISK     &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans             &trans      &kp RA(LEFT_BRACKET)  &kp RA(RIGHT_BRACKET)  &kp EXCLAMATION  &kp PIPE
                        &trans  &trans  &trans    &trans             &trans      &trans
            >;
        };

        symbol_left {
            bindings = <
&kp RA(H)          &kp RA(N)    &kp PERCENT        &up_hash       &mg_comma      &kp RA(F)                &trans  &trans  &trans  &trans  &trans  &trans
&trans             &kp PLUS     &equal_left        &minus_down    &comma_right   &kp LS(RA(SEMICOLON))    &trans  &trans  &trans  &trans  &trans  &trans
&kp RA(BACKSLASH)  &kp AT_SIGN  &kp LS(RA(MINUS))  &kp RA(MINUS)  &kp RA(GRAVE)  &kp LS(RA(GRAVE))        &trans  &trans  &trans  &trans  &trans  &trans
                                                   &trans         &trans         &trans                   &trans  &trans  &trans
            >;
        };

        settings {
            bindings = <
&trans      &none         &none         &none         &sys_reset    &bootloader     &bootloader   &sys_reset    &none         &none         &none         &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&kp F1      &kp F2        &kp F3        &kp F4        &kp F5        &kp F6          &kp F7        &kp F8        &kp F9        &kp F10       &kp F11       &kp F12
                                        &trans        &none         &trans          &none         &trans        &trans
            >;
        };
    };
};
